'use strict';

exports.__esModule = true;
exports.clearConsole = clearConsole;
exports.createBanner = createBanner;
exports.createWebpackExternals = createWebpackExternals;
exports.deepToString = deepToString;
exports.defaultNodeEnv = defaultNodeEnv;
exports.endsWith = endsWith;
exports.installReact = installReact;
exports.typeOf = typeOf;

var _child_process = require('child_process');

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _argvSetEnv = require('argv-set-env');

var _argvSetEnv2 = _interopRequireDefault(_argvSetEnv);

var _debug = require('./debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isFirstClear = true;
function clearConsole() {
  if (process.env.NWB_TEST) return;
  // This will completely wipe scrollback in cmd.exe on Windows - recommend
  // using the `start` command to launch nwb's dev server in a new prompt.
  // On first run, clear completely so it doesn't show half screen on Windows.
  // On next runs, use a different sequence that properly scrolls back.
  process.stdout.write(isFirstClear ? '\x1bc' : '\x1b[2J\x1b[0f');
  isFirstClear = false;
}

/**
 * Create a banner comment for a UMD build file from package.json config.
 */
function createBanner(pkg) {
  var banner = pkg.name + ' v' + pkg.version;
  if (pkg.homepage) {
    banner += ' - ' + pkg.homepage;
  }
  if (pkg.license) {
    banner += '\n' + pkg.license + ' Licensed';
  }
  return banner;
}

/**
 * Create Webpack externals config from a module â†’ global variable mapping.
 */
function createWebpackExternals() {
  var externals = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return Object.keys(externals).reduce(function (webpackExternals, packageName) {
    var globalName = externals[packageName];
    webpackExternals[packageName] = {
      root: globalName,
      commonjs2: packageName,
      commonjs: packageName,
      amd: packageName
    };
    return webpackExternals;
  }, {});
}

/**
 * Log objects in their entirety so we can see everything in debug output.
 */
function deepToString(object) {
  return _util2.default.inspect(object, { colors: true, depth: null });
}

function defaultNodeEnv(nodeEnv) {
  // Set cross-platform environment variables based on any --set-env-NAME
  // arguments passed to the command.
  (0, _argvSetEnv2.default)();
  // Don't override environment it's been set
  if (!process.env.NODE_ENV) {
    // Default environment for a build
    process.env.NODE_ENV = nodeEnv;
  }
}

/**
 * String.prototype.endsWith() is behind the --harmony flag in Node.js v0.12.
 */
function endsWith(s1, s2) {
  return s1.lastIndexOf(s2) === s1.length - s2.length;
}

/**
 * Install react for the user when it's needed.
 */
function installReact() {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var _ref$dev = _ref.dev;
  var dev = _ref$dev === undefined ? false : _ref$dev;
  var _ref$save = _ref.save;
  var save = _ref$save === undefined ? false : _ref$save;
  var _ref$cwd = _ref.cwd;
  var cwd = _ref$cwd === undefined ? process.cwd() : _ref$cwd;
  var _ref$version = _ref.version;
  var version = _ref$version === undefined ? 'latest' : _ref$version;

  var saveArg = save ? ' --save' + (dev ? '-dev' : '') : '';
  var command = 'npm install' + saveArg + ' react@' + version + ' react-dom@' + version;
  (0, _debug2.default)(cwd + ' $ ' + command);
  (0, _child_process.execSync)(command, { cwd: cwd, stdio: 'inherit' });
}

/**
 * Better typeof.
 */
function typeOf(o) {
  if (Number.isNaN(o)) return 'nan';
  return Object.prototype.toString.call(o).slice(8, -1).toLowerCase();
}