#!/usr/bin/env node
'use strict';

var _chalk = require('chalk');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _package = require('../../package.json');

var _package2 = _interopRequireDefault(_package);

var _constants = require('../constants');

var _errors = require('../errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var COMMAND_MODULES = {
  build: 'build-react',
  run: 'serve-react'
};

function handleError(error) {
  if (error instanceof _errors.UserError) {
    console.error((0, _chalk.red)(error.message));
  } else if (error instanceof _errors.ConfigValidationError) {
    error.report.log();
  } else {
    console.error((0, _chalk.red)('Error running command: ' + error.message));
    if (error.stack) {
      console.error(error.stack);
    }
  }
  process.exit(1);
}

var args = (0, _minimist2.default)(process.argv.slice(2), {
  alias: {
    c: 'config',
    h: 'help',
    v: 'version'
  },
  boolean: ['help', 'version']
});

var command = args._[0];

if (args.version || /^v(ersion)?$/.test(command)) {
  console.log('v' + _package2.default.version);
  process.exit(0);
}

if (args.help || !command || /^h(elp)?$/.test(command)) {
  console.log('Usage: ' + (0, _chalk.green)('react') + ' ' + (0, _chalk.yellow)('(run|build)') + ' ' + (0, _chalk.cyan)('[options]') + '\n\nOptions:\n  ' + (0, _chalk.cyan)('-c, --config') + '   config file to use ' + (0, _chalk.cyan)('[default: ' + _constants.CONFIG_FILE_NAME + ']') + '\n  ' + (0, _chalk.cyan)('-h, --help') + '     display this help message\n  ' + (0, _chalk.cyan)('-v, --version') + '  print nwb\'s version\n\nCommands:\n  ' + (0, _chalk.green)('react run') + ' ' + (0, _chalk.yellow)('<entry>') + ' ' + (0, _chalk.cyan)('[options]') + '\n    Serve a React app or component module.\n\n    Arguments:\n      ' + (0, _chalk.yellow)('entry') + '          entry point for the app, or a component module\n\n    Options:\n      ' + (0, _chalk.cyan)('--install') + '      automatically install missing npm dependencies\n      ' + (0, _chalk.cyan)('--host') + '         hostname to bind the dev server to\n      ' + (0, _chalk.cyan)('--mount-id') + '     id for the <div> the app will render into ' + (0, _chalk.cyan)('[default: app]') + '\n      ' + (0, _chalk.cyan)('--no-fallback') + '  disable serving of the index page from any path\n      ' + (0, _chalk.cyan)('--port') + '         port to run the dev server on ' + (0, _chalk.cyan)('[default: 3000]') + '\n      ' + (0, _chalk.cyan)('--reload') + '       auto reload the page if hot reloading fails\n      ' + (0, _chalk.cyan)('--title') + '        contents for <title> ' + (0, _chalk.cyan)('[default: React App]') + '\n\n  ' + (0, _chalk.green)('react build') + ' ' + (0, _chalk.yellow)('<entry>') + ' ' + (0, _chalk.cyan)('[dist_dir] [options]') + '\n    Create a static build for a React app.\n\n    Arguments:\n      ' + (0, _chalk.yellow)('entry') + '       entry point for the app\n      ' + (0, _chalk.cyan)('dist_dir') + '    build output directory ' + (0, _chalk.cyan)('[default: dist/]') + '\n\n    Options:\n      ' + (0, _chalk.cyan)('--mount-id') + '  id for the <div> the app will render into ' + (0, _chalk.cyan)('[default: app]') + '\n      ' + (0, _chalk.cyan)('--title') + '     contents for <title> ' + (0, _chalk.cyan)('[default: React App]') + '\n      ' + (0, _chalk.cyan)('--preact') + '    create a Preact build (preact and preact-compat must be installed)\n      ' + (0, _chalk.cyan)('--vendor') + '    create a \'vendor\' bundle for node_modules/ modules\n');
  process.exit(args.help || command ? 0 : 1);
}

if (!COMMAND_MODULES.hasOwnProperty(command)) {
  console.error((0, _chalk.red)('Unknown command:') + ' ' + (0, _chalk.yellow)(command));
  process.exit(1);
}

var commandModule = require('../commands/' + COMMAND_MODULES[command]);

try {
  commandModule(args, function (err) {
    if (err) handleError(err);
  });
} catch (e) {
  handleError(e);
}