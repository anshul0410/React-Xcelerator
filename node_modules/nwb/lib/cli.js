'use strict';

exports.__esModule = true;
exports.default = cli;

var _chalk = require('chalk');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cli(argv, cb) {
  var args = (0, _minimist2.default)(argv, {
    alias: {
      c: 'config',
      h: 'help',
      v: 'version'
    },
    boolean: ['help', 'version']
  });

  var command = args._[0];

  if (args.version || /^v(ersion)?$/.test(command)) {
    console.log('v' + _package2.default.version);
    process.exit(0);
  }

  if (args.help || !command || /^h(elp)?$/.test(command)) {
    console.log('Usage: ' + (0, _chalk.green)('nwb') + ' ' + (0, _chalk.yellow)('<command>') + ' ' + (0, _chalk.cyan)('[options]') + '\n\nOptions:\n  ' + (0, _chalk.cyan)('-c, --config') + '   config file to use ' + (0, _chalk.cyan)('[default: ' + _constants.CONFIG_FILE_NAME + ']') + '\n  ' + (0, _chalk.cyan)('-h, --help') + '     display this help message\n  ' + (0, _chalk.cyan)('-v, --version') + '  print nwb\'s version\n\nProject creation commands:\n  ' + (0, _chalk.green)('nwb new') + ' ' + (0, _chalk.yellow)('<project_type> <dir_name>') + ' ' + (0, _chalk.cyan)('[options]') + '\n    Create a project in a new directory.\n\n    Arguments:\n      ' + (0, _chalk.yellow)('project_type') + '  project type - see the list below\n      ' + (0, _chalk.yellow)('dir_name') + '      project name / directory to create the project in\n\n  ' + (0, _chalk.green)('nwb init') + ' ' + (0, _chalk.yellow)('<project_type>') + ' ' + (0, _chalk.cyan)('[dir_name] [options]') + '\n    Initialise a project in the current directory.\n\n    Arguments:\n      ' + (0, _chalk.yellow)('project_type') + '  project type - see the list below\n      ' + (0, _chalk.cyan)('dir_name') + '      project name ' + (0, _chalk.cyan)('[default: current directory name]') + '\n\n  Options:\n    ' + (0, _chalk.cyan)('-f, --force') + '   force project creation, don\'t ask questions\n    ' + (0, _chalk.cyan)('--es-modules') + '  enable or disable (' + (0, _chalk.cyan)('--no-es-modules') + ') an ES6 modules build\n    ' + (0, _chalk.cyan)('--no-git') + '      disable creation of a Git repo with an initial commit\n    ' + (0, _chalk.cyan)('--react') + '       version of React to install for React apps & components\n    ' + (0, _chalk.cyan)('--umd=<var>') + '   enable or disable (' + (0, _chalk.cyan)('--no-umd') + ') a UMD build\n\n  Project types:\n    ' + (0, _chalk.yellow)('react-app') + '        a React app\n    ' + (0, _chalk.yellow)('react-component') + '  a React component or library npm module\n    ' + (0, _chalk.yellow)('web-app') + '          a plain JavaScript app\n    ' + (0, _chalk.yellow)('web-module') + '       a plain JavaScript npm module\n\nGeneric development commands:\n  Arguments for these commands depend on the type of project they\'re being run\n  in. See the applicable project type-specific commands below.\n\n  ' + (0, _chalk.green)('nwb build') + '\n    Clean and build the project.\n\n    Options:\n      ' + (0, _chalk.cyan)('--no-vendor') + '  disable creation of \'vendor\' bundle for node_modules/ modules\n\n  ' + (0, _chalk.green)('nwb clean') + '\n    Delete built resources.\n\n  ' + (0, _chalk.green)('nwb serve') + '\n    Serve an app, or a component\'s demo app, with hot reloading.\n\n    Options:\n      ' + (0, _chalk.cyan)('--install') + '      automatically install missing npm dependencies\n      ' + (0, _chalk.cyan)('--host') + '         hostname to bind the dev server to\n      ' + (0, _chalk.cyan)('--no-fallback') + '  disable serving of the index page from any path\n      ' + (0, _chalk.cyan)('--port') + '         port to run the dev server on ' + (0, _chalk.cyan)('[default: 3000]') + '\n      ' + (0, _chalk.cyan)('--reload') + '       auto reload the page if hot reloading fails\n\n  ' + (0, _chalk.green)('nwb test') + '\n    Run tests.\n\n    Options:\n      ' + (0, _chalk.cyan)('--coverage') + '  create a code coverage report\n      ' + (0, _chalk.cyan)('--server') + '    keep running tests on every change\n\nProject type-specific commands:\n  ' + (0, _chalk.green)('nwb build-demo') + '\n    Build a demo app from demo/src/index.js to demo/dist/.\n\n  ' + (0, _chalk.green)('nwb build-react-app') + ' ' + (0, _chalk.cyan)('[entry] [dist_dir]') + '\n    Build a React app from ' + (0, _chalk.cyan)('entry') + ' to ' + (0, _chalk.cyan)('dist_dir') + '.\n\n  ' + (0, _chalk.green)('nwb build-react-component') + ' ' + (0, _chalk.cyan)('[umd_entry]') + '\n    Create ES5, ES6 modules and UMD builds for a React component.\n\n    Options:\n      ' + (0, _chalk.cyan)('--no-demo') + '       don\'t build the demo app, if present\n      ' + (0, _chalk.cyan)('--no-proptypes') + '  don\'t wrap propTypes with an environment check\n\n  ' + (0, _chalk.green)('nwb build-web-app') + ' ' + (0, _chalk.cyan)('[entry] [dist_dir]') + '\n    Build a web app from ' + (0, _chalk.cyan)('entry') + ' to ' + (0, _chalk.cyan)('dist_dir') + '.\n\n  ' + (0, _chalk.green)('nwb build-web-module') + ' ' + (0, _chalk.cyan)('[umd_entry]') + '\n    Create ES5, ES6 modules and UMD builds for a web module.\n\n  ' + (0, _chalk.green)('nwb clean-app') + ' ' + (0, _chalk.cyan)('[dist_dir]') + '\n    Delete ' + (0, _chalk.cyan)('dist_dir') + '.\n\n  ' + (0, _chalk.green)('nwb clean-demo') + '\n    Delete demo/dist/.\n\n  ' + (0, _chalk.green)('nwb clean-module') + '\n    Delete coverage/, es/, lib/ and umd/.\n\n  ' + (0, _chalk.green)('nwb serve-react-app') + ' ' + (0, _chalk.cyan)('[entry]') + '\n    Serve a React app from ' + (0, _chalk.cyan)('entry') + '\n\n  ' + (0, _chalk.green)('nwb serve-react-demo') + '\n    Serve a React demo app from demo/src/index.js.\n\n  ' + (0, _chalk.green)('nwb serve-web-app') + ' ' + (0, _chalk.cyan)('[entry]') + '\n    Serve a web app from ' + (0, _chalk.cyan)('entry') + '.\n\n  Arguments:\n    ' + (0, _chalk.cyan)('entry') + '      entry point ' + (0, _chalk.cyan)('[default: src/index.js]') + '\n    ' + (0, _chalk.cyan)('dist_dir') + '   build output directory ' + (0, _chalk.cyan)('[default: dist/]') + '\n    ' + (0, _chalk.cyan)('umd_entry') + '  entry point for UMD builds ' + (0, _chalk.cyan)('[default: src/index.js]') + '\n\nHelper commands:\n  ' + (0, _chalk.green)('nwb check-config') + ' ' + (0, _chalk.cyan)('[config]') + ' ' + (0, _chalk.cyan)('[options]') + '\n    Check your configuration file for errors, deprecated config and usage hints.\n\n    Arguments:\n      ' + (0, _chalk.cyan)('config') + '     path to the file to validate ' + (0, _chalk.cyan)('[default: ' + _constants.CONFIG_FILE_NAME + ']') + '\n\n    Options:\n      ' + (0, _chalk.cyan)('--command') + '  nwb command name to use when checking your config\n      ' + (0, _chalk.cyan)('-e, --env') + '  NODE_ENV to use when checking your config: dev, test or prod\n');
    process.exit(args.help || command ? 0 : 1);
  }

  var unknownCommand = function unknownCommand() {
    console.error((0, _chalk.red)('Unknown command:') + ' ' + (0, _chalk.yellow)(command));
    process.exit(1);
  };

  // Validate the command is in foo-bar-baz format before trying to resolve a
  // module path with it.
  if (!/^[a-z]+(?:-[a-z]+)*$/.test(command)) {
    unknownCommand();
  }

  var commandModulePath = void 0;
  try {
    commandModulePath = require.resolve('./commands/' + command);
  } catch (e) {
    unknownCommand();
  }

  var commandModule = require(commandModulePath);
  commandModule(args, cb);
}
module.exports = exports['default'];