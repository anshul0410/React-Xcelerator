'use strict';

exports.__esModule = true;

var _PROJECT_CREATORS;

exports.getNpmModulePrefs = getNpmModulePrefs;
exports.npmModuleVars = npmModuleVars;
exports.validateProjectType = validateProjectType;
exports.default = createProject;

var _child_process = require('child_process');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _copyTemplateDir = require('copy-template-dir');

var _copyTemplateDir2 = _interopRequireDefault(_copyTemplateDir);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _constants = require('./constants');

var _errors = require('./errors');

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var nwbVersion = _package2.default.version.split('.').slice(0, 2).concat('x').join('.');

// Hack to generate simple config file contents without JSON formatting
var toSource = function toSource(obj) {
  return JSON.stringify(obj, null, 2).replace(/"([^"]+)":/g, '$1:').replace(/"/g, "'");
};

function writeConfigFile(dir, config) {
  _fs2.default.writeFileSync(_path2.default.join(dir, _constants.CONFIG_FILE_NAME), 'module.exports = ' + toSource(config) + '\n');
}

function getNpmModulePrefs(args, done) {
  // An ES6 modules build is enabled by default, but can be disabled with
  // --no-es-modules or --es-modules=false (or a bunch of other undocumented
  // stuff)
  var esModules = args['es-modules'] !== false && !/^(0|false|no|nope|off)$/.test(args['es-modules']);
  // Pass a UMD global variable name with --umd=MyThing, or pass --no-umd to
  // indicate you don't want a UMD build.
  var umd = (0, _utils.typeOf)(args.umd) === 'string' ? args.umd : false;

  // Don't ask questions if the user doesn't want them, or already told us all
  // the answers.
  if (args.f || args.force || 'umd' in args && 'es-modules' in args) {
    return done(null, { umd: umd, esModules: esModules });
  }

  _inquirer2.default.prompt([{
    when: function when() {
      return !('es-modules' in args);
    },
    type: 'confirm',
    name: 'esModules',
    message: 'Do you want to create an ES6 modules build for use by ES6 bundlers?',
    default: esModules
  }, {
    when: function when() {
      return !('umd' in args);
    },
    type: 'confirm',
    name: 'createUMD',
    message: 'Do you want to create a UMD build for global usage via <script> tag?',
    default: umd
  }, {
    when: function when(_ref) {
      var createUMD = _ref.createUMD;
      return createUMD;
    },
    type: 'input',
    name: 'umd',
    message: 'Which global variable should the UMD build set?',
    validate: function validate(input) {
      return input.trim() ? true : 'Required to create a UMD build';
    },

    default: umd || ''
  }]).then(function (answers) {
    return done(null, answers);
  }, function (err) {
    return done(err);
  });
}

function logCreatedFiles(targetDir, createdFiles) {
  createdFiles.sort().forEach(function (createdFile) {
    var relativePath = _path2.default.relative(targetDir, createdFile);
    console.log('  ' + _chalk2.default.green('create') + ' ' + relativePath);
  });
}

function initGit(args, cwd) {
  // Allow git init to be disabled with a --no-git flag
  if (args.git === false) {
    return;
  }

  try {
    (0, _child_process.execSync)('git --version', { cwd: cwd, stdio: 'ignore' });
    (0, _child_process.execSync)('git init', { cwd: cwd });
    (0, _child_process.execSync)('git add .', { cwd: cwd });
    (0, _child_process.execSync)('git commit -m "Initial commit from nwb v' + _package2.default.version + '"\'', { cwd: cwd });
    console.log(_chalk2.default.green('Successfully initialized git.'));
  } catch (e) {
    // Pass
  }
}

function npmModuleVars(vars) {
  vars.esModulesPackageConfig = vars.esModules ? '\n  "jsnext:main": "es/index.js",\n  "module": "es/index.js",' : '';
  return vars;
}

function validateProjectType(projectType) {
  if (!projectType) {
    throw new _errors.UserError('A project type must be provided, one of: ' + _constants.PROJECT_TYPES.join(', '));
  }
  if (_constants.PROJECT_TYPES.indexOf(projectType) === -1) {
    throw new _errors.UserError('Project type must be one of: ' + _constants.PROJECT_TYPES.join(', '));
  }
}

var PROJECT_CREATORS = (_PROJECT_CREATORS = {}, _PROJECT_CREATORS[_constants.REACT_APP] = function (args, name, targetDir, cb) {
  var templateDir = _path2.default.join(__dirname, '../templates/' + _constants.REACT_APP);
  var reactVersion = args.react || _constants.REACT_VERSION;
  var templateVars = { name: name, nwbVersion: nwbVersion, reactVersion: reactVersion };
  (0, _copyTemplateDir2.default)(templateDir, targetDir, templateVars, function (err, createdFiles) {
    if (err) return cb(err);
    logCreatedFiles(targetDir, createdFiles);
    initGit(args, targetDir);
    console.log('Installing dependencies...');
    try {
      (0, _utils.installReact)({ cwd: targetDir, version: reactVersion, save: true });
    } catch (e) {
      return cb(e);
    }
    cb();
  });
}, _PROJECT_CREATORS[_constants.REACT_COMPONENT] = function (args, name, targetDir, cb) {
  getNpmModulePrefs(args, function (err, prefs) {
    if (err) return cb(err);
    var umd = prefs.umd;
    var esModules = prefs.esModules;

    var templateDir = _path2.default.join(__dirname, '../templates/' + _constants.REACT_COMPONENT);
    var reactVersion = args.react || _constants.REACT_VERSION;
    var templateVars = npmModuleVars({ name: name, esModules: esModules, nwbVersion: nwbVersion, reactVersion: reactVersion });
    (0, _copyTemplateDir2.default)(templateDir, targetDir, templateVars, function (err, createdFiles) {
      if (err) return cb(err);
      try {
        writeConfigFile(targetDir, {
          type: 'react-component',
          npm: {
            esModules: esModules,
            umd: umd ? { global: umd, externals: { react: 'React' } } : false
          }
        });
      } catch (e) {
        return cb(e);
      }
      logCreatedFiles(targetDir, createdFiles);
      initGit(args, targetDir);
      console.log('Installing dependencies...');
      try {
        (0, _utils.installReact)({ cwd: targetDir, version: reactVersion, dev: true, save: true });
      } catch (e) {
        return cb(e);
      }
      cb();
    });
  });
}, _PROJECT_CREATORS[_constants.WEB_APP] = function (args, name, targetDir, cb) {
  var templateDir = _path2.default.join(__dirname, '../templates/' + _constants.WEB_APP);
  var templateVars = { name: name, nwbVersion: nwbVersion };
  (0, _copyTemplateDir2.default)(templateDir, targetDir, templateVars, function (err, createdFiles) {
    if (err) return cb(err);
    logCreatedFiles(targetDir, createdFiles);
    initGit(args, targetDir);
    cb();
  });
}, _PROJECT_CREATORS[_constants.WEB_MODULE] = function (args, name, targetDir, cb) {
  getNpmModulePrefs(args, function (err, prefs) {
    if (err) return cb(err);
    var umd = prefs.umd;
    var esModules = prefs.esModules;

    var templateDir = _path2.default.join(__dirname, '../templates/' + _constants.WEB_MODULE);
    var templateVars = npmModuleVars({ name: name, esModules: esModules, nwbVersion: nwbVersion });
    (0, _copyTemplateDir2.default)(templateDir, targetDir, templateVars, function (err, createdFiles) {
      if (err) return cb(err);
      try {
        writeConfigFile(targetDir, {
          type: 'web-module',
          npm: {
            esModules: esModules,
            umd: umd ? { global: umd, externals: {} } : false
          }
        });
      } catch (e) {
        return cb(e);
      }
      logCreatedFiles(targetDir, createdFiles);
      initGit(args, targetDir);
      cb();
    });
  });
}, _PROJECT_CREATORS);

function createProject(args, type, name, dir, cb) {
  PROJECT_CREATORS[type](args, name, dir, cb);
}