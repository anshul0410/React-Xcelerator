'use strict';

exports.__esModule = true;
exports.default = moduleBuild;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _webpackMerge = require('webpack-merge');

var _webpackMerge2 = _interopRequireDefault(_webpackMerge);

var _cleanModule = require('./commands/clean-module');

var _cleanModule2 = _interopRequireDefault(_cleanModule);

var _createBabelConfig = require('./createBabelConfig');

var _createBabelConfig2 = _interopRequireDefault(_createBabelConfig);

var _debug = require('./debug');

var _debug2 = _interopRequireDefault(_debug);

var _errors = require('./errors');

var _exec = require('./exec');

var _exec2 = _interopRequireDefault(_exec);

var _getUserConfig = require('./getUserConfig');

var _getUserConfig2 = _interopRequireDefault(_getUserConfig);

var _utils = require('./utils');

var _webpackBuild = require('./webpackBuild');

var _webpackBuild2 = _interopRequireDefault(_webpackBuild);

var _webpackUtils = require('./webpackUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// These match DEFAULT_TEST_DIRS and DEFAULT_TEST_FILES for co-located tests in
// ./createKarmaConfig.js; unfortunately Babel doesn't seem to support reusing
// the same patterns.
var DEFAULT_BABEL_IGNORE_CONFIG = ['.spec.js', '.test.js', '-test.js', '/__tests__/'];

/**
 * Runs Babel with generated config written to a temporary .babelrc.
 */
function runBabel(src, outDir, buildBabelConfig, userBabelConfig) {
  var babelConfig = (0, _createBabelConfig2.default)(buildBabelConfig, userBabelConfig);
  babelConfig.ignore = DEFAULT_BABEL_IGNORE_CONFIG;

  (0, _debug2.default)('babel config: %s', (0, _utils.deepToString)(babelConfig));

  _fs2.default.writeFileSync('.babelrc', JSON.stringify(babelConfig, null, 2));
  try {
    (0, _exec2.default)('babel', [src, '--out-dir', outDir, '--quiet']);
  } finally {
    _fs2.default.unlinkSync('.babelrc');
  }
}

function moduleBuild(args) {
  var buildConfig = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var cb = arguments[2];

  // XXX Babel doesn't support passing the path to a babelrc file any more
  if (_glob2.default.sync('.babelrc').length > 0) {
    throw new _errors.UserError('Unable to build the module as there is a .babelrc in your project', 'nwb needs to write a temporary .babelrc to configure the build');
  }

  (0, _cleanModule2.default)(args);

  var src = _path2.default.resolve('src');
  var userConfig = (0, _getUserConfig2.default)(args);

  var spinner = (0, _ora2.default)('Creating ES5 build').start();
  runBabel(src, _path2.default.resolve('lib'), (0, _webpackMerge2.default)(buildConfig.babel, buildConfig.babelDev || {}, {
    // Don't force ES5 users of the ES5 build to eat a .require
    plugins: [require.resolve('babel-plugin-add-module-exports')]
  }), userConfig.babel);
  spinner.succeed();

  // The ES6 modules build is enabled by default, and must be explicitly
  // disabled if you don't want it.
  if (userConfig.npm.esModules !== false) {
    spinner = (0, _ora2.default)('Creating ES6 modules build').start();
    runBabel(src, _path2.default.resolve('es'), (0, _webpackMerge2.default)(buildConfig.babel, buildConfig.babelDev || {}, {
      // Don't transpile modules, for use by ES6 module bundlers
      modules: false
    }), userConfig.babel);
    spinner.succeed();
  }

  _temp2.default.cleanupSync();

  if (!userConfig.npm.umd) {
    return cb();
  }

  spinner = (0, _ora2.default)('Creating UMD builds').start();

  var pkg = require(_path2.default.resolve('package.json'));
  var entry = _path2.default.resolve(args._[1] || 'src/index.js');
  var webpackBuildConfig = {
    babel: buildConfig.babel,
    entry: [entry],
    output: {
      filename: pkg.name + '.js',
      library: userConfig.npm.umd.global,
      libraryTarget: 'umd',
      path: _path2.default.resolve('umd')
    },
    externals: (0, _utils.createWebpackExternals)(userConfig.npm.umd.externals),
    polyfill: false,
    plugins: {
      banner: (0, _utils.createBanner)(pkg)
    }
  };

  process.env.NODE_ENV = 'development';
  (0, _webpackBuild2.default)(args, webpackBuildConfig, function (err, stats1) {
    if (err) {
      spinner.fail();
      return cb(err);
    }
    process.env.NODE_ENV = 'production';
    webpackBuildConfig.babel = (0, _webpackMerge2.default)(buildConfig.babel, buildConfig.babelProd || {});
    webpackBuildConfig.devtool = 'source-map';
    webpackBuildConfig.output.filename = pkg.name + '.min.js';
    (0, _webpackBuild2.default)(args, webpackBuildConfig, function (err, stats2) {
      if (err) {
        spinner.fail();
        return cb(err);
      }
      spinner.succeed();
      console.log();
      (0, _webpackUtils.logGzippedFileSizes)(stats1, stats2);
      cb();
    });
  });
}
module.exports = exports['default'];