'use strict';

exports.__esModule = true;
exports.default = buildWebApp;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _appConfig = require('../appConfig');

var _webpackBuild = require('../webpackBuild');

var _webpackBuild2 = _interopRequireDefault(_webpackBuild);

var _webpackUtils = require('../webpackUtils');

var _cleanApp = require('./clean-app');

var _cleanApp2 = _interopRequireDefault(_cleanApp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Using a config function as webpackBuild() sets NODE_ENV to production if it
// hasn't been set by the user and we don't want production optimisations in
// development builds.
function buildConfig(args) {
  var entry = args._[1] || 'src/index.js';
  var dist = args._[2] || 'dist';

  var production = process.env.NODE_ENV === 'production';
  var filenamePattern = production ? '[name].[chunkhash:8].js' : '[name].js';

  return {
    babel: {
      commonJSInterop: true
    },
    devtool: 'source-map',
    entry: {
      app: [_path2.default.resolve(entry)]
    },
    output: {
      filename: filenamePattern,
      chunkFilename: filenamePattern,
      path: _path2.default.resolve(dist),
      publicPath: '/'
    },
    plugins: {
      copy: [{ from: _path2.default.resolve('public'), to: dist, ignore: '.gitkeep' }],
      html: (0, _appConfig.getDefaultHTMLConfig)(),
      vendor: args.vendor !== false
    }
  };
}

/**
 * Build a plain JS app.
 */
function buildWebApp(args, cb) {
  var dist = args._[2] || 'dist';

  (0, _cleanApp2.default)({ _: ['clean-app', dist] });

  var spinner = (0, _ora2.default)('Building app').start();
  (0, _webpackBuild2.default)(args, buildConfig, function (err, stats) {
    if (err) {
      spinner.fail();
      return cb(err);
    }
    (0, _webpackUtils.logBuildResults)(stats, spinner);
    cb();
  });
}
module.exports = exports['default'];