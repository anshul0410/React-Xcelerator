'use strict';

exports.__esModule = true;
exports.default = serveReact_;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _errors = require('../errors');

var _serveReact = require('../serveReact');

var _serveReact2 = _interopRequireDefault(_serveReact);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Serve a standalone React entry module.
 */
function serveReact_(args, cb) {
  if (args._.length === 1) {
    return cb(new _errors.UserError('An entry module must be specified.'));
  }

  // Install React if it's not available
  try {
    _resolve2.default.sync('react', { basedir: process.cwd() });
  } catch (e) {
    console.log('React is not available locally, installing...');
    (0, _utils.installReact)();
  }

  var entry = args._[1];
  var mountId = args['mount-id'] || 'app';

  (0, _serveReact2.default)(args, {
    babel: {
      stage: 0
    },
    // Use a dummy entry module to try to render what was exported if nothing
    // has been rendered after importing the provided entry module.
    entry: [require.resolve('../reactRunEntry')],
    output: {
      filename: 'app.js',
      path: process.cwd(),
      publicPath: '/'
    },
    plugins: {
      define: {
        NWB_REACT_RUN_MOUNT_ID: JSON.stringify(mountId)
      },
      html: {
        mountId: mountId,
        title: args.title || 'React App'
      }
    },
    resolve: {
      alias: {
        // Allow the dummy entry module to import the provided entry module
        'nwb-react-run-entry': _path2.default.resolve(entry),
        // Allow the dummy entry module to resolve React and ReactDOM from the cwd
        'react': _path2.default.dirname(_resolve2.default.sync('react', { basedir: process.cwd() })),
        'react-dom': _path2.default.dirname(_resolve2.default.sync('react-dom', { basedir: process.cwd() }))
      }
    }
  }, cb);
}
module.exports = exports['default'];