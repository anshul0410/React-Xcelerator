'use strict';

exports.__esModule = true;
exports.default = buildReact;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _errors = require('../errors');

var _webpackBuild = require('../webpackBuild');

var _webpackBuild2 = _interopRequireDefault(_webpackBuild);

var _webpackUtils = require('../webpackUtils');

var _cleanApp = require('./clean-app');

var _cleanApp2 = _interopRequireDefault(_cleanApp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Using a config function as webpackBuild() sets NODE_ENV to production if it
// hasn't been set by the user and we don't want production optimisations in
// development builds.
function buildConfig(args) {
  var entry = args._[1];
  var dist = args._[2] || 'dist';

  var production = process.env.NODE_ENV === 'production';
  var filenamePattern = production ? '[name].[chunkhash:8].js' : '[name].js';

  var config = {
    babel: {
      commonJSInterop: true,
      stage: 0,
      presets: ['react']
    },
    devtool: 'source-map',
    entry: {
      app: [_path2.default.resolve(entry)]
    },
    output: {
      filename: filenamePattern,
      chunkFilename: filenamePattern,
      path: _path2.default.resolve(dist),
      publicPath: '/'
    },
    plugins: {
      html: {
        mountId: args['mount-id'] || 'app',
        title: args.title || 'React App'
      },
      // A vendor bundle must be explicitly enabled with a --vendor flag
      vendor: args.vendor
    }
  };

  if (args.preact) {
    config.resolve = {
      alias: {
        'react': 'preact-compat',
        'react-dom': 'preact-compat'
      }
    };
  }

  if (production) {
    config.babel.presets.push('react-prod');
  }

  return config;
}

/**
 * Build a standalone React entry module.
 */
function buildReact(args, cb) {
  if (args._.length === 1) {
    return cb(new _errors.UserError('An entry module must be given.'));
  }

  var dist = args._[2] || 'dist';

  (0, _cleanApp2.default)({ _: ['clean-app', dist] });

  var spinner = (0, _ora2.default)('Building ' + (args.preact ? 'Pr' : 'R') + 'eact app').start();
  (0, _webpackBuild2.default)(args, buildConfig, function (err, stats) {
    if (err) {
      spinner.fail();
      return cb(err);
    }
    (0, _webpackUtils.logBuildResults)(stats, spinner);
    cb();
  });
}
module.exports = exports['default'];